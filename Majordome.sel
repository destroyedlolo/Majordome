#!/usr/local/bin/Selene
-- Majordome, Smart home automation scripts
--
-- This tool is configured for my own usage and is matching my home configuration
-- but it should be took as example to build your own dashboard

assert( SELENE_VERSION >= 3.0200, "HDB requires at least Selene v3.01.02, got " .. SELENE_VERSION ..'\n' )

lfs = require "lfs" -- LuaFileSystem

require "tostring"	-- debug only

--
-- Initializing
--

Topics = {}	-- Topics we are looking for

--
-- Helpers
--
require "LocalConfiguration"
require "logs"

rotatelog( '2.00.01' )	-- Log creation

--
-- Support classes
--
require "Supports/MQTTinputs"

--
-- Load user configured modules
--
function loaddir( dir )
	for f in lfs.dir(dir) do
		local attr = lfs.attributes( dir ..'/'.. f )
		local found, len, res = f:find("^(.*)%.[^%.]*$")
		if found and attr.mode == 'file' and res:sub(1,1) ~= '.' then
			require(dir ..'/'.. res)
			SelLog.log("*I* " .. dir ..'/'.. res .. ' loaded')
		end
	end
end

loaddir( 'Inputs' )

--
-- Broker's stuffs
--
function disconnected( cause )
	print("Broker connection's lost due to : ".. cause);
	os.exit( 20 )
end

-- Connection and subscription
Brk, err = SelMQTT.connect( BROKERHOST, { clientID=CLIENTID, reliable=false, OnDisconnect=disconnected  } )
if not Brk then
	err = 'Broker creation ' .. err
	SelLog.log(err)
	print(err)
	return
end

_, err = Brk:subscribe( Topics )
if err then
	print( "Subscribtion", err )
	return
end

--
-- Let's go
--
while true do -- Main todo list handler
	ret, err = Selene.WaitFor()
	if err then
		print(err)
		return
	end

	if type(ret) == 'function' then
		ret()
-- print( "Table du timer", universal_tostring(tbl_timers) ) -- *d* Debug only
	end
end
