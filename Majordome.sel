#!/usr/local/bin/Selene
-- Majordome, Smart home automation scripts
--
-- This tool is configured for my own usage and is matching my home configuration
-- but it should be took as example to build your own dashboard

assert( SELENE_VERSION >= 2.0401, "HDB requires at least Selene v2.04.01, got " .. SELENE_VERSION ..'\n' )

-- debug only
require "tostring"

--
-- Helpers
--
require "LocalConfiguration"
require "helpers"
require "logs"

--
-- Initializing
--
rotatelog( '1.00.00' )	-- Création du log initial

Topics = {}				-- List des topics à surveiller
Tasks = {}				-- Taches associées aux evenements
tbl_timers = {			-- Timer's planning
	[0.0] = { rotatelog }
}

--
-- Loading sub stuffs
--

require "Mode"
require "Saison"
require "Temperatures"

--
-- Timer's stuffs
--
function CronExec()
	tmrSubFunc( tbl_timers )
	tmrRethink( timerCron, tbl_timers )
end

timerCron, err = SelTimer.create { at=tmrNextTarget( tbl_timers ), ifunc=CronExec } 
if err then
	err = "Cron's timer creation error :" .. err
	SelLog.log(err)
	print(err)
	return
end

print( "Table du timer", universal_tostring(tbl_timers) ) -- *d* Debug only
tmrRethink( timerCron, tbl_timers )

--
-- Broker's stuffs
--
function disconnected( cause )
	print("Broker connection's lost due to : ".. cause);
	os.exit( 20 )
end

-- Connection and subscription
Brk, err = SelMQTT.connect( BROKERHOST, { clientID=CLIENTID, reliable=false, OnDisconnect=disconnected  } )
if not Brk then
	err = 'Broker creation ' .. err
	SelLog.log(err)
	print(err)
	return
end

_, err = Brk:subscribe( Topics )
if err then
	print( "Subscribtion", err )
	return
end

--
-- Let's go
--
while true do -- Main todo list handler
	ret, err = Selene.WaitFor(timerCron)
	if err then
		print(err)
		return
	end

	if type(ret) == 'function' then
		ret()
	end
end
