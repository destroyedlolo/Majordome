#!/usr/local/bin/Selene
-- Majordome, Smart home automation scripts
--
-- This tool is configured for my own usage and is matching my home configuration
-- but it should be took as example to build your own dashboard

assert( SELENE_VERSION >= 2.0401, "HDB requires at least Selene v2.04.01, got " .. SELENE_VERSION ..'\n' )

-- debug only
-- require "tostring"

-- Misc includes
require (SELENE_SCRIPT_DIR .. "/StaticConfiguration")
require (SELENE_SCRIPT_DIR .. "/helpers")

--
-- Logging's stuffs
--

function rotatelog()
	local msg
	if SelLog.status() then
		msg = "Rotation des logs"
	else
		msg = "\n\tLancement de Majordome; Selene v".. SELENE_VERSION
	end

	if VERBOSE then
		local _,err = SelLog.init('/tmp/Majordome.log_' .. os.date('%Y%m%d'))
		if err then
			print("*E* Log creation", err)
		end
	end
	local _,err = SelLog.log(msg)
	if err then
		print("*E* Log creation", err)
	end
end

rotatelog()	-- Initial log creation

-- hSaison is launched in order to rething the planning
Topics = {}

require (SELENE_SCRIPT_DIR .. "/Mode")
require (SELENE_SCRIPT_DIR .. "/Temperature")
require (SELENE_SCRIPT_DIR .. "/Saison")
require (SELENE_SCRIPT_DIR .. "/Soleil")
require (SELENE_SCRIPT_DIR .. "/Salon")
require (SELENE_SCRIPT_DIR .. "/Bureau")
require (SELENE_SCRIPT_DIR .. "/ChambresHaut")
require (SELENE_SCRIPT_DIR .. "/Chat")

TableMerge( Topics, {
	{ topic = HLEVE, func = Topic2Number, trigger=hSaison, trigger_once=true },
	{ topic = HCOUCHE, func = Topic2Number, trigger=hSaison, trigger_once=true }
} )
---
-- Timers
---
tbl_timers = {
	[0.0] = { rotatelog },
	[5.0] = { DetermineSaison },
}

function CronExec()
	tmrSubFunc( tbl_timers )
	tmrRethink( timerCron, tbl_timers )
end

timerCron, err = SelTimer.create { at=tmrNextTarget( tbl_timers ), ifunc=CronExec } 
if err then
	err = "Cron's timer creation error :" .. err
	SelLog.log(err)
	print(err)
	return
end

--
-- Broker's stuffs
--

function disconnected( cause )
	print("Broker connection's lost due to : ".. cause);
	os.exit( 20 )
end

-- Connection and subscription
Brk, err = SelMQTT.connect( BROKERHOST, { clientID=CLIENTID, reliable=false, OnDisconnect=disconnected  } )
if not Brk then
	err = 'Broker creation ' .. err
	SelLog.log(err)
	print(err)
	return
end

-- print(universal_tostring( Topics ))
_, err = Brk:subscribe( Topics )
if err then
	print( "Subscribtion", err )
	return
end

---
-- Processing starting
---

while true do -- Main todo list handler
	ret, err = Selene.WaitFor(timerCron)
	if err then
		print(err)
		return
	end

	if type(ret) == 'function' then
		ret()
	end
end
